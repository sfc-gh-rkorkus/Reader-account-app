import streamlit as st
from snowflake.snowpark.context import get_active_session
from snowflake.snowpark.functions import table_function
import snowflake.snowpark.functions as F
import snowflake.snowpark.types as T
import base64
import os
import pandas as pd
import fuzzywuzzy as fw
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

from snowflake.snowpark import functions as F
# We can also use Snowpark for our analyses!
from snowflake.snowpark.context import get_active_session
session = get_active_session()

# Create a UDF for the matching, if this is hgoing to be used often it is better to do a permanent
#@F.udf(name="FW_token_set_ratio", is_permanent=True,stage_location= "TEMP.RONK_TEST.READER_TEST", packages=['fuzzywuzzy'], session=session)
#def String_Ratio(s1: str, s2: str) -> float:
#   return fuzz.token_set_ratio(s1, s2)

def DF_to_csv (df):
    with st.spinner('Generating CSV :snowflake:'):
        Av = df.to_pandas()
        csv= Av.to_csv()
        return csv

def main():
    #Logo
    #image_name = 'Network_image.png'
    #mime_type = image_name.split('.')[-1:][0].lower() 
    #if os.path.isfile(image_name):
     #   with open(image_name, "rb") as f:
      #      content_bytes = f.read()
       # content_b64encoded = base64.b64encode(content_bytes).decode()
        #image_string = f'data:image/{mime_type};base64,{content_b64encoded}'
        #st.image(image_string)
    #else:
     #   st.write("Logo not uploaded in Streamlit App Stage")
    
    st.title('Network Effect: Reader Accounts :snowflake:')
    st.write ('Find if your prospects are using Snowflake through a Reader Account of another Snowflake (Data or App) Provider. The result will be a list of Prospects Names similar to Reader Account Names, using Fuzzy Matching. You can see which Snowflake Providers your Prospect is collaborating with. Use this to your advantage in your Acquisition sales cycle - happy selling!')
    Search_by = st.radio("Search by Account Owner Name or Prospect Name:", ("Search by Account Owner Name", "Search by Prospect Name"))
    if Search_by == "Search by Account Owner Name":
            df = session.table("FINANCE.CUSTOMER.SUBSCRIPTION")[["SNOWFLAKE_ACCOUNT_ALIAS", "SALESFORCE_ACCOUNT_NAME", "SALESFORCE_ACCOUNT_OWNER_NAME"]].filter(F.col("is_reader_account") == 'true')
            df3 = session.table("FIVETRAN.SALESFORCE.ACCOUNT")[["ACCOUNT_OWNER_NAME_C"]].filter(F.col("TYPE") == 'Prospect')
            Owner = st.selectbox("SFDC_Account_Owner:", df3.select("ACCOUNT_OWNER_NAME_C").distinct().order_by(F.col("ACCOUNT_OWNER_NAME_C").try_cast("String")))
            st.write('Select the filtering accuracy. The default is balanced, if you want to see more results choose High Coverage, for better accuracy select High precision')
            filter_option = st.radio(
               "",
                ["High Precision", "Balanced", "High Coverage"],
                index=1,  # Default selection (Balanced)
            )
            if filter_option == "Balanced":
                score = 75
            elif filter_option == "High Precision":
                score = 90
            else: 
                score = 50

            df4 = df.group_by("SNOWFLAKE_ACCOUNT_ALIAS").agg(F.count("SNOWFLAKE_ACCOUNT_ALIAS").alias("X"))
            df4 = df4.filter(F.col("X") >6).order_by("X", ascending = False)

            df2 = session.table("FIVETRAN.SALESFORCE.ACCOUNT")[["NAME"]].filter((F.col("ACCOUNT_OWNER_NAME_C") == Owner) & (F.col("TYPE") == 'Prospect'))
            df = df.filter((F.col("SNOWFLAKE_ACCOUNT_ALIAS") != 'null') & (~F.col("SNOWFLAKE_ACCOUNT_ALIAS").in_(df4.select("SNOWFLAKE_ACCOUNT_ALIAS"))) & (~F.col("SNOWFLAKE_ACCOUNT_ALIAS").in_(["FINANCE", "GLOBAL", "BANK", "MARKETING", "SALES", "ANALYTICS","TECH","AUTO","CUSTOMER","TRAINING","NEW", "RESEARCH", "MEDICAL","NETWORK", "HOSTINTERNATIONAL", "STUDIO", "BUSINESS", "REAL", "GROWTH", "CREATOR", "ENGIE", "DEV", "OPTION1", "OPTION2", "OPTION3", "PROTECT", "SALESFORCE", "SANDBOX", "TRIP", "DBTREADER", "FOOD", "INTERN", "ABCREADER", "ART", "PRICING", "RECRUITING", "SHARE", "TABLEAU", "Orders", "GERMANY", "BRANDS", "CHECK", "CORPORATE", "DATA_SCIENCE"])) & (F.length(F.col("SNOWFLAKE_ACCOUNT_ALIAS")) >2))

            st.write('Number of prospects this Account Owner has:', df2.count())
            with st.spinner('Calculating... If the chosen Account Owner has more than 500 SFDC accounts this might take a few minutes :coffee:'): 
                matching_df = df2.join(df).with_column("score"
                                                       , F.call_function('FW_token_set_ratio'
                                                       ,F.col("NAME")
                                                       , F.col("SNOWFLAKE_ACCOUNT_ALIAS")))

                Final_df = matching_df.filter(F.col("score") >score ).order_by(["NAME", "score"],ascending = [True, False])
                Final_df = Final_df.dropDuplicates("NAME","SALESFORCE_ACCOUNT_NAME","SALESFORCE_ACCOUNT_OWNER_NAME","SNOWFLAKE_ACCOUNT_ALIAS","SCORE")
                Final_df = Final_df.with_column_renamed(F.col("NAME"), "Prospect Name").with_column_renamed(F.col("SNOWFLAKE_ACCOUNT_ALIAS"), "Reader Account Name").with_column_renamed(F.col("SALESFORCE_ACCOUNT_NAME"), "Snowflake Provider (SFDC Account Name)").with_column_renamed(F.col("SALESFORCE_ACCOUNT_OWNER_NAME"), "Snowflake Provider Account Owner")
                st.data_editor(Final_df)

    else:
            df = session.table("FINANCE.CUSTOMER.SUBSCRIPTION")[["SNOWFLAKE_ACCOUNT_ALIAS", "SALESFORCE_ACCOUNT_NAME", "SALESFORCE_ACCOUNT_OWNER_NAME"]].filter(F.col("is_reader_account") == 'true')
            df3 = session.table("FIVETRAN.SALESFORCE.ACCOUNT")[["NAME"]].filter(F.col("TYPE") == 'Prospect')
            #st.write(df3.count())
            option = st.radio("Select an option:", ("Search ''Free-Style''","Search from the opp list"))
            if option == "Search from the opp list":
                with st.spinner('Loading all open opportunities'):
                    opportunity = st.selectbox("SFDC Account Name:", df3.select("NAME").distinct().order_by(F.col("NAME")).collect())
            else:
                opportunity = st.text_input("Prospect name:", "")
    
    
            st.write('Select the filtering accuracy. The default is balanced, if you want to see more results choose High Coverage, for better accuracy select High precision')
            filter_option = st.radio(
               "",
                ["High Precision", "Balanced", "High Coverage"],
                index=1,  # Default selection (Balanced)
            )
            if filter_option == "Balanced":
                score = 75
            elif filter_option == "High Precision":
                score = 90
            else: 
                score = 50
            df4 = df.group_by("SNOWFLAKE_ACCOUNT_ALIAS").agg(F.count("SNOWFLAKE_ACCOUNT_ALIAS").alias("X"))
            df4 = df4.filter(F.col("X") >6).order_by("X", ascending = False)
            readers = df.filter((F.col("SNOWFLAKE_ACCOUNT_ALIAS") != 'null') & (~F.col("SNOWFLAKE_ACCOUNT_ALIAS").in_(df4.select("SNOWFLAKE_ACCOUNT_ALIAS"))) & (~F.col("SNOWFLAKE_ACCOUNT_ALIAS").in_(["FINANCE", "GLOBAL", "BANK", "MARKETING", "SALES", "ANALYTICS","TECH","AUTO","CUSTOMER","TRAINING","NEW", "RESEARCH", "MEDICAL","NETWORK", "HOSTINTERNATIONAL", "STUDIO", "BUSINESS", "REAL", "GROWTH", "CREATOR", "ENGIE", "DEV", "OPTION1", "OPTION2", "OPTION3", "PROTECT", "SALESFORCE", "SANDBOX", "TRIP", "DBTREADER", "FOOD", "INTERN", "ABCREADER", "ART", "PRICING", "RECRUITING", "SHARE", "TABLEAU", "Orders", "GERMANY", "BRANDS", "CHECK", "CORPORATE", "DATA_SCIENCE"])) & (F.length(F.col("SNOWFLAKE_ACCOUNT_ALIAS")) >2)).order_by(F.col("SNOWFLAKE_ACCOUNT_ALIAS"))
            readers = readers.with_column("opp_name", F.lit(opportunity))
            with st.spinner('Calculating... :snowflake:'):
                    matching_df = readers.with_column("score"
                                                       , F.call_function('FW_token_set_ratio'
                                                       ,F.col("opp_name")
                                                       , F.col("SNOWFLAKE_ACCOUNT_ALIAS")))


                    Final_df = matching_df.filter(F.col("score") >score )                
                    Final_df = Final_df.select("SALESFORCE_ACCOUNT_NAME","SALESFORCE_ACCOUNT_OWNER_NAME","SNOWFLAKE_ACCOUNT_ALIAS","SCORE")
                    Final_df = Final_df.dropDuplicates("SALESFORCE_ACCOUNT_NAME","SALESFORCE_ACCOUNT_OWNER_NAME","SNOWFLAKE_ACCOUNT_ALIAS","SCORE")
                    Final_df = Final_df.with_column_renamed(F.col("SNOWFLAKE_ACCOUNT_ALIAS"), "Reader Account Name").with_column_renamed(F.col("SALESFORCE_ACCOUNT_NAME"), "Snowflake Provider (Account Name)").with_column_renamed(F.col("SALESFORCE_ACCOUNT_OWNER_NAME"), "Snowflake Provider Account Owner")
                
                    st.data_editor(Final_df)
    
    #prepare_CSV = st.button("Generate a CSV file") 
    #if prepare_CSV:
    with st.spinner('Generating CSV :snowflake:'):
        csv= DF_to_csv(Final_df)
        st.download_button("Download CSV",data = csv, mime='text/csv')
            
    


# Run the Streamlit app
if __name__ == '__main__':
    main()

st.write("Authors: Ron Korkus & Marianne Voogt")
